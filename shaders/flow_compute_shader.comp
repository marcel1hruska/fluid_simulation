#version 430 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

#define DAMPING 0.998
#define GRAVITY 10

//heights info
layout(std430,binding=0) buffer h
{
	vec2 Heights[ ];
};

//flux info
layout(std430,binding=1) buffer f
{
	vec4 Flux[ ];
};

layout(std140) uniform settings {
	vec4 camera_position;
	vec4 camera_direction;
	vec4 rand_pos;
	int mode;
	int grid_size;
	int cube_size;
	float delta;
};

layout( local_size_x = 32, local_size_y = 32, local_size_z = 1 ) in;

uint x = gl_GlobalInvocationID.x;
uint y = gl_GlobalInvocationID.y;

//get element
uint el(uint arrx = x, uint arry = y)
{
	return arrx + arry*grid_size;
}

float total_height(vec2 height)
{
	return height.x + height.y;
}

float sum(vec4 toSum)
{
	return toSum.x + toSum.y + toSum.z + toSum.w;
}

void main()
{
	if (x == 0 || x >= grid_size -1 || y == 0 || y >= grid_size - 1)
			return;

	//adjacent heights
	vec4 adj_heights = vec4(
		((x > 1) ? Heights[el(x-1,y)].x : 0) + ((x > 1) ? Heights[el(x-1,y)].y : 0),
		((x < grid_size - 2) ? Heights[el(x+1,y)].x : 0) + ((x < grid_size - 2) ? Heights[el(x+1,y)].y : 0),
		((y > 1) ? Heights[el(x,y-1)].x : 0) + ((y > 1) ? Heights[el(x,y-1)].y : 0),
		((y < grid_size - 2) ? Heights[el(x,y+1)].x : 0) + ((y < grid_size - 2) ? Heights[el(x,y+1)].y : 0));

	float current_water_height = Heights[el()].x;

	//difference between current and adjacent
	vec4 height_dif = vec4(current_water_height + Heights[el()].y) - adj_heights;

	//acceleration using gravity
	vec4 accel = GRAVITY*height_dif;

	//whole outflow
	vec4 outflow = DAMPING*Flux[el()] + delta*accel;

	//remove negative values
	outflow = max(vec4(0), outflow);

	float out_water = sum(outflow)*delta;

	if (out_water == 0.0)
		outflow = vec4(0);
	else
	{
		//rescale
		float water_scale = current_water_height/ out_water;
		if (water_scale < 1.0)
			outflow *= water_scale;
	}

	//reflective boundaries
	if (x == 1) outflow.x = 0;
	if (y == 1) outflow.z = 0;
	if (x >= grid_size - 2) outflow.y = 0;
	if (y >= grid_size - 2) outflow.w = 0;	

	Flux[el()] = outflow;
}